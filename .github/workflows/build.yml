# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: "Build"

on:
  workflow_call:
    inputs:
      os: { type: string, required: true, description: "Name of the OS that jobs run on" }
      go-version: { type: string, required: true, description: "Version of Go" }
  workflow_dispatch:
    inputs:
      os: { type: string, default: 'ubuntu-latest', description: "Name of the OS that jobs run on" }
      go-version: { type: string, default: '1.22', description: "Version of Go" }

jobs:
  build-and-upload:
    name: "Build & Upload"
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 30

      - name: Setup Variables
        if: ${{ ! startsWith(inputs.os, 'windows') }}
        run: |
          git_version_tag() {
            git fetch --tags
            local exact_tag
            exact_tag=$(git describe --tags --exact-match 2>/dev/null || echo '')
            if [ -n "$exact_tag" ]; then
              echo "$exact_tag"
            else
              local latest_tag
              latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0')
              local latest_commit
              latest_commit=$(git rev-parse --short=7 HEAD)
              echo "$latest_tag-$latest_commit"
            fi
          }
          tag=$(git_version_tag)
          system=$(uname -s | tr '[:upper:]' '[:lower:]')
          architecture=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/amd64/x86_64/g')
          artifact_filename="fortify-${system}-${architecture}"
          echo "ArtifactTag=$tag" >> $GITHUB_ENV
          echo "ArtifactFilename=$artifact_filename" >> $GITHUB_ENV
          sed -e "s|#VERSION|${tag}|g" < "cmd/version.go-e" > "cmd/version.go"
          echo "Artifact Version:  $tag"
          echo "Artifact Filename: $artifact_filename"

      - name: Setup Variables on Windows
        if: startsWith(inputs.os, 'windows')
        run: |
          function Get-GitVersionTag {
            git fetch --tags
            $exactTag = git describe --tags --exact-match 2>$null
            if ($LASTEXITCODE -ne 0) {
              $LASTEXITCODE = 0
            }
            if ($exactTag) {
              Write-Output $exactTag
            } else {
              $latestTag = git describe --tags --abbrev=0 2>$null
              if ($LASTEXITCODE -ne 0) {
                $LASTEXITCODE = 0
              }
              if (-not $latestTag) {
                $latestTag = 'v0'
              }
              $latestCommit = (git rev-parse --short=7 HEAD).Trim()
              Write-Output "$latestTag-$latestCommit"
            }
          }
          $tag = Get-GitVersionTag
          if ($LASTEXITCODE -ne 0) {
            $LASTEXITCODE = 0
          }
          $system = "windows"
          $architecture = $env:PROCESSOR_ARCHITECTURE.ToLower()
          $architecture = $architecture -replace 'amd64', 'x86_64'
          $artifact_filename = "fortify-${system}-${architecture}"
          echo "ArtifactTag=$tag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ArtifactFilename=$artifact_filename" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          (Get-Content "cmd/version.go-e") -replace '#VERSION', $tag | Set-Content "cmd/version.go"
          Write-Host "Artifact Version:  $tag"
          Write-Host "Artifact Filename: $artifact_filename"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}

      - name: Test
        run: go test -v ./...

      - name: Build
        #run: go build -v ./...
        run: |
          go build -ldflags "-s -w" -v -o ./${{ env.ArtifactFilename }}
          file ./${{ env.ArtifactFilename }}
          ./${{ env.ArtifactFilename }} version

      - name: Upload
        if: env.ArtifactTag != 'v0'
        uses: actions/upload-artifact@v4
        with:
          retention-days: 3
          name: ${{ env.ArtifactFilename }}
          path: ${{ github.workspace }}/${{ env.ArtifactFilename }}

      - name: Build Darwin X64
        if: startsWith(inputs.os, 'macos')
        run: |
          artifact_filename="fortify-darwin-x86_64"
          GOARCH=x86_64 GOOS=darwin go build -ldflags "-s -w" -v -o ./${artifact_filename}
          file ./${artifact_filename}
          echo "ArtifactFilename=$artifact_filename" >> $GITHUB_ENV

      - name: Upload Darwin X64
        if: env.ArtifactTag != 'v0' && startsWith(inputs.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          retention-days: 3
          name: ${{ env.ArtifactFilename }}
          path: ${{ github.workspace }}/${{ env.ArtifactFilename }}
